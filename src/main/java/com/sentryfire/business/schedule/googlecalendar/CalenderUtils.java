 /*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  * Author:    Tony Greway
  * File:      CalenderUtils.java
  * Created:   7/16/18
  *
  * Description:
  *
  *-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

 package com.sentryfire.business.schedule.googlecalendar;

 import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import com.google.api.client.util.DateTime;
import com.google.api.services.calendar.model.ConferenceData;
import com.google.api.services.calendar.model.Event;
import com.google.api.services.calendar.model.EventAttendee;
import com.google.api.services.calendar.model.EventDateTime;
import com.google.api.services.calendar.model.EventReminder;
import com.google.common.collect.Lists;
import com.sentryfire.business.schedule.model.EventTask;
import com.sentryfire.business.schedule.model.MonthlyCalendar;
import com.sentryfire.config.AppConfiguartion;
import com.sentryfire.model.WO;

 public class CalenderUtils
 {
    // Used to identify events generated by program or user
    public static String AUTO = "AUTOGEN";

    private static final String RECUR_RULE = "RRULE:FREQ=DAILY;COUNT=2";

    public static Event createEvent(String name,
                                    String location,
                                    String desc,
                                    DateTime start,
                                    DateTime end,
                                    String recurRule,
                                    List<String> emailAttendees,
                                    Integer reminderPopup,
                                    Integer reminderEmail)
    {
       Event event = new Event().setSummary(name).setLocation(location).setDescription(desc);

       EventDateTime eStart = new EventDateTime().setDateTime(start).setTimeZone("America/Denver");
       event.setStart(eStart);

       EventDateTime eEnd = new EventDateTime().setDateTime(end).setTimeZone("America/Denver");
       event.setEnd(eEnd);

       String[] recurrence = new String[]{recurRule};
       event.setRecurrence(Arrays.asList(recurrence));

       if (emailAttendees != null)
       {
          List<EventAttendee> attendeeList = emailAttendees.stream().map(
             s -> new EventAttendee().setEmail(s)).collect(Collectors.toList());
          event.setAttendees(attendeeList);
       }

       if (reminderEmail != null && reminderPopup != null)
       {
          EventReminder[] reminderOverrides = new EventReminder[]{
             new EventReminder().setMethod("email").setMinutes(reminderEmail),
             new EventReminder().setMethod("popup").setMinutes(reminderPopup),
             };
          Event.Reminders reminders = new Event.Reminders()
             .setUseDefault(false)
             .setOverrides(Arrays.asList(reminderOverrides));
          event.setReminders(reminders);
       }

       // No conference
       ConferenceData cd = new ConferenceData();
       cd.setEntryPoints(null);
       cd.setConferenceSolution(null);
       event.setConferenceData(cd);

       return event;
    }

    public static List<Event> monthlyCalendarToEvents(MonthlyCalendar calendar)
    {
       List<Event> events = Lists.newArrayList();

       // Get All Event Tasks
       List<EventTask> allEventsTasks = calendar.getAllEventTasks(true);

       for (EventTask task : allEventsTasks)
       {
          String title;
          String desc;
          String location;
          if (task.isLunch())
          {
             title = "LUNCH";
             desc = "LUNCH";
             location = "LUNCH";
          }
          else
          {
             WO wo = task.getWo();
             title = wo.getNAME() + " : " + wo.getCN() + "-" + wo.getIN2();

             // Build Description
             List<String> itemDesc = wo.getMetaData().getItemStatHolderList().stream().map(
                i -> i.getCount() + "-" + i.getItemCode()).collect(Collectors.toList());

             // Greeting
             desc = AppConfiguartion.getInstance().getEmailDescription();
             // Items
             desc += "SERVICE ITEMS:\t" + String.join(",", itemDesc);

             desc += "\n\nCONTACT:\tJOHN DOE"; //+ wo.getNAME();
             desc += "\nPHONE:\t\t123-456-7890"; //+ wo.getNAME();
             if (wo.getCN() != null && !wo.getCN().isEmpty())
                desc += "\nCN:\t\t\t" + wo.getCN();
             if (wo.getIN2() != null && !wo.getIN2().isEmpty())
                desc += "\nJOB-IN2:\t" + wo.getIN2();
             desc += "\n\n" + AUTO;
             location = wo.getADR1() + " " + wo.getCITY() + " " + wo.getZIP();
          }
          title = title.replace("_", " ");
          desc = desc.replace("_", " ");
          location = location.replace("_", " ");

          DateTime start = new DateTime(task.getStart().toDate());
          DateTime end = new DateTime(task.getEnd().toDate());
          List<String> people = Lists.newArrayList(AppConfiguartion.getInstance().getSchedulerEmail());
          Event event = CalenderUtils.createEvent(title, location, desc, start, end, null, people,
                                                  AppConfiguartion.getInstance().getCalReminderMin(),
                                                  AppConfiguartion.getInstance().getCalReminderMin());
          events.add(event);
       }
       return events;
    }

 }
